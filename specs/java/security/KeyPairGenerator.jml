package java.security;

//@ non_null_by_default
public abstract class KeyPairGenerator {

//      private static final sun.security.util.Debug pdebug;
//      private static final boolean skipDebug;
    
      //@ spec_public
      private final java.lang.String algorithm;
      Provider provider;
      
      //@ protected normal_behavior
      //@   ensures this.algorithm == algorithm;
      //@ pure
      protected KeyPairGenerator(java.lang.String algorithm);
      
      //@ public normal_behavior
      //@   ensures \result == algorithm;
      //@ pure
      public java.lang.String getAlgorithm();
      
      //@ public normal_behavior
      //@ pure
      //@ model public static boolean algorithmIsSupported(String algorithm);
      
      //@ private behavior
      //@   ensures \fresh(\result);
      //@   signals_only NoSuchAlgorithmException;
      //@ pure
      private static KeyPairGenerator getInstance(sun.security.jca.GetInstance.Instance inst, java.lang.String s);
      
      //@ public normal_behavior
      //@   requires algorithmIsSupported(algorithm);
      //@   ensures \fresh(\result);
      //@ also public exceptional_behavior
      //@   requires !algorithmIsSupported(algorithm);
      //@   signals_only NoSuchAlgorithmException;
      //@ pure
      public static KeyPairGenerator getInstance(java.lang.String algorithm) throws NoSuchAlgorithmException;
      public static KeyPairGenerator getInstance(java.lang.String algorithm, java.lang.String ss) throws NoSuchAlgorithmException, NoSuchProviderException;
      public static KeyPairGenerator getInstance(java.lang.String algorithm, Provider provider) throws NoSuchAlgorithmException;
      public final Provider getProvider();
      void disableFailover();
      public void initialize(int n);
      public void initialize(int n, SecureRandom random);
      
      //@ public normal_behavior
      //@ model public pure boolean validParameterSpec(java.security.spec.AlgorithmParameterSpec alg);

      //@ public normal_behavior
      //@   requires validParameterSpec(alg);
      //@ also public exceptional_behavior
      //@   requires !validParameterSpec(alg);
      //@   signals_only InvalidAlgorithmParameterException;
      public void initialize(java.security.spec.AlgorithmParameterSpec alg) throws InvalidAlgorithmParameterException;
      public void initialize(java.security.spec.AlgorithmParameterSpec alg, SecureRandom random) throws InvalidAlgorithmParameterException;
      public final KeyPair genKeyPair();
      
      //@ public normal_behavior
      //@   ensures true;
      //@ pure
      public KeyPair generateKeyPair();
}
