package org.jmlspecs.lang;

//@ immutable pure
public class string implements IJmlPrimitiveType {
/*@   
    public normal_behavior
      ensures \result >= 0;
    model public \bigint size();
    
    public normal_behavior
    model public char get(\bigint i);

    public normal_behavior
      ensures \result == (this.size() == 0);
    model public boolean isEmpty();
    
    public normal_behavior
      ensures \result.size() == 0;
    model static public string empty();
    
    public normal_behavior
      ensures \result.size() == s.length();
      ensures (\forall \bigint i; 0 <= i && i <\result.size(); \result.get(i) == s.charAt((int)i));
    model static public string string(String s);
    
    public normal_behavior
       ensures \result == (s.size() == ss.size() && (\forall \bigint i;; (0 <= i && i < s.size()) ==> (s.get(i) == ss.get(i)) ));
    model public static boolean equals(string s, string ss);
    
    public normal_behavior
       ensures \result == (this == s || equals(this,s));
    model public boolean equals(string s);
    
    public normal_behavior
      requires 0 <= j && j <= this.size();
      ensures \result.size() == this.size() + 1;
      ensures (\forall \bigint i;; (0 <= i && i < j) ==> (\result.get(i) == this.get(i)));
      ensures (\forall \bigint i;; (j+1 <= i && i < \result.size()) ==> (\result.get(i) == this.get(i-1)));
      ensures \result.get(j) == v;
    model public string add(\bigint j, char v);

    public normal_behavior
      ensures \result == add(size(),v);
    model public string add(char v);

    public normal_behavior
      ensures \result.size() == this.size() + s.size();
      ensures (\forall \bigint i;; (0 <= i && i < this.size()) ==> (\result.get(i) == this.get(i)));
      ensures (\forall \bigint i;; (0 <= i && i < s.size()) ==> (\result.get(i+this.size()) == this.get(i-1)));
    model public string append(string s);

    public normal_behavior
      requires 0 <= j && j < this.size();
      ensures \result.size() == this.size() - 1;
      ensures (\forall \bigint i;; (0 <= i && i < j) ==> (\result.get(i) == this.get(i)));
      ensures (\forall \bigint i;; (j <= i && i < \result.size()) ==> (\result.get(i) == this.get(i+1)));
    model public string remove(\bigint j);
    
    public normal_behavior
      requires 0 <= start && start <= this.size() && 0 <= length && length <= this.size() - start;
      ensures \result.size() == length;
      ensures (\forall \bigint i;; (0 <= i && i < \result.size()) ==> \result.get(i) == this.get(i+start));
    model public string substring(\bigint start, \bigint length);
  
@*/
}
