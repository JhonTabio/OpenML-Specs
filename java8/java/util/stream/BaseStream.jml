package java.util.stream;

//@ non_null_by_default
public interface BaseStream<T, S extends BaseStream<T, S>> extends java.lang.AutoCloseable {

	//@ public normal_behavior
	//@   requires 0 <= i && i < _length;
	//@   ensures \result == values[i];
	//@ pure
	//@ model public T get(int i);
	
	//@ model public final instance T[] values;

	//@ model public final instance int _length;
	//@ public invariant _length == values.length;
	
	// FIXME - would like to make the above a \bigint, but then problems arise with bitvector computations

//	  public abstract java.util.Iterator<T> iterator();
//	  public abstract java.util.Spliterator<T> spliterator();
//	  public abstract boolean isParallel();
	
	//@ public normal_behavior
	//@   ensures \result == this;
	//@ pure
	  public abstract S sequential();
		//@ public normal_behavior
		//@   ensures \result == this;  // FIXME - result is an arbitrary permutation of the input
		//@ pure
	  public abstract S parallel();
		//@ public normal_behavior
		//@   ensures \result == this;  // FIXME - result is an arbitrary permutation of the input
		//@ pure
	  public abstract S unordered();
//	  public abstract S onClose(java.lang.Runnable);
	  
	  //@ public normal_behavior
	  //@   assignable autocloseableContent;
	  public abstract void close();
	}
