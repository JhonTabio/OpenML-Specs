package java.nio;

public abstract class Buffer {
	  static final int SPLITERATOR_CHARACTERISTICS;

	  //@ spec_public
	  private int mark;
	  
	  //@ spec_public
	  private int position;
	  
	  //@ spec_public
	  private int limit;
	  
	  //@ spec_public
	  private int capacity;
	  
	  //@ public invariant 0 <= mark && mark <= position && position <= limit && limit <= capacity;
	  
	  long address;
	  Buffer(int i, int j, int k, int m);
	  
	  //@ public normal_behavior
	  //@   ensures \result == capacity;
	  //@ pure
	  public final int capacity();
	  
	  //@ public normal_behavior
	  //@   ensures \result == position;
	  //@ pure
	  public final int position();
	  
	  //@ public normal_behavior
	  //@   requires 0 <= i && i <= limit;
	  //@   assignable position;
	  //@   ensures position == i;
	  public final Buffer position(int i);
	  
	  //@ public normal_behavior
	  //@   ensures \result == limit;
	  //@ pure
	  public final int limit();
	  //@ public normal_behavior
	  //@   requires this.position <= i && i <= this.capacity;
	  //@   assignable this.limit;
	  //@   ensures this.limit == i;
	  public final Buffer limit(int i);
	  
	  public final Buffer mark();
	  public final Buffer reset();
	  public final Buffer clear();
	  public final Buffer flip();
	  public final Buffer rewind();

	  //@ public normal_behavior
	  //@   ensures \result == (limit - position);
	  //@ pure
	  public final int remaining();
	  
	  //@ public normal_behavior
	  //@   ensures \result == (position < limit);
	  //@ pure
	  public final boolean hasRemaining();
	  public abstract boolean isReadOnly();
	  public abstract boolean hasArray();
	  public abstract java.lang.Object array();
	  public abstract int arrayOffset();
	  public abstract boolean isDirect();
	  final int nextGetIndex();
	  final int nextGetIndex(int i);
	  final int nextPutIndex();
	  final int nextPutIndex(int i);
	  final int checkIndex(int i);
	  final int checkIndex(int i, int j);
	  final int markValue();
	  final void truncate();
	  final void discardMark();
	  static void checkBounds(int i, int j, int k);
}